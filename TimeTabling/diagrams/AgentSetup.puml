@startuml
'https://plantuml.com/sequence-diagram
!$AGENT_COLOR = "#FF7700"
!$AGENT_LETTER = "A"
!$AGENT_CONTROLLER_COLOR = "#00FF00"

'define the agents'
title Inicializaci√≥n de agentes


participant "Aplicacion" as App

participant "AgentContainer : mainContainer" as AC
participant "JSONHelper" as JH <<static>>

participant "AgenteController : profesor " as ACP <<$AGENT_LETTER, $AGENT_CONTROLLER_COLOR>>
participant "AgenteController : sala " as ACS <<$AGENT_LETTER, $AGENT_CONTROLLER_COLOR>>
participant "AgenteController : supervisor " as ACSU <<$AGENT_LETTER, $AGENT_CONTROLLER_COLOR>>
'add DirectoryFacilitator as static participant'



activate AC
App --> AC : <<create>>
deactivate AC

activate JH
AC -> JH : parseAsArray("profesores.json")
JH --> App : JSONArray<ProfesorData>

AC -> JH : parseAsArray("salas.json")
JH --> App : JSONArray<SalaData>
deactivate JH

activate App
App -> App : initializeSalas(container, salas)
'lo mismo para las salas'
loop n veces donde n es la cantidad de salas
    activate ACS
    App -> AC : createNewAgent(ASala)
    AC --> App : AgentController (de sala)
    App -> ACS : start()
    ACS --> App
    deactivate ACS
end


App -> App : calculateTotalSubjects(profesores)
App -> App : initializeProfesores(container, profesores)

'iterate n times n being the professors count and create n agents'
loop n veces donde n es la cantidad de profesores
    activate ACP
    App -> AC : createNewAgent(profName, profClass, profData)
    AC --> App : AgentController (de profesor)
    App -> ACP : start()
    ACP --> App
    deactivate ACP
end

App -> App : createMonitorAgent(container)
App -> AC : createNewAgent(Supervisor, supervisorClass, profControllers)
App -> ACSU : start()
ACSU --> App
deactivate App

@enduml